/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package stock;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.ListIterator;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;


/**
 *
 * @author chalaka 
 */

public class ShowJFrame extends javax.swing.JFrame implements ActionListener {

    /**
     * Creates new form ShowJFrame
     */
    private StockDB symAndPrice;
    private StockDB symAndName;
    private DefaultTableModel model,bidderModel;
    private MainServer mainServer;
    private final String [] names={ "FB", "VRTU", "MSFT", "GOOGL", "YHOO", "XLNX", "TSLA" ,"TXN"};
    
    private LinkedList<Bidder> objBidders=new LinkedList<Bidder>();
    
    public ShowJFrame(StockDB symAndPrice,StockDB symAndName,MainServer mainServer) {
        initComponents();
        bidderModel = (DefaultTableModel)biddersTable.getModel();
        biddersTable.getColumnModel().getColumn(0).setPreferredWidth(25);
        biddersTable.getColumnModel().getColumn(1).setPreferredWidth(10);
        biddersTable.getColumnModel().getColumn(2).setPreferredWidth(300);
        model = (DefaultTableModel)priceTable.getModel();
        priceTable.getColumnModel().getColumn(0).setPreferredWidth(10);
        priceTable.getColumnModel().getColumn(1).setPreferredWidth(240);
        priceTable.getColumnModel().getColumn(2).setPreferredWidth(25);
        
        model.insertRow(0, new Object[]{names[0],symAndName.findName(names[0]),Double.parseDouble(symAndPrice.findName(names[0]))});
        model.insertRow(1, new Object[]{names[1],symAndName.findName(names[1]),Double.parseDouble(symAndPrice.findName(names[1]))});
        model.insertRow(2, new Object[]{names[2],symAndName.findName(names[2]),Double.parseDouble(symAndPrice.findName(names[2]))});
        model.insertRow(3, new Object[]{names[3],symAndName.findName(names[3]),Double.parseDouble(symAndPrice.findName(names[3]))});
        model.insertRow(4, new Object[]{names[4],symAndName.findName(names[4]),Double.parseDouble(symAndPrice.findName(names[4]))});
        model.insertRow(5, new Object[]{names[5],symAndName.findName(names[5]),Double.parseDouble(symAndPrice.findName(names[5]))});
        model.insertRow(6, new Object[]{names[6],symAndName.findName(names[6]),Double.parseDouble(symAndPrice.findName(names[6]))});
        model.insertRow(7, new Object[]{names[7],symAndName.findName(names[7]),Double.parseDouble(symAndPrice.findName(names[7]))});
        
        
        this.symAndName=symAndName;
        this.symAndPrice=symAndPrice;
        this.mainServer=mainServer;
        Timer timer = new Timer(500, this); 
	timer.start(); 
        
    }
     /**
     *In here filling the Bidder info table ,
     * removing old ones and set the updated ones.
     *   
     */
    private  void fillbidderTable(){
       
        Bidder bidder;
        int j=0;
         for(int i=0;i<names.length;i++){
             j=0;
            objBidders=mainServer.bidders.get(names[i]);
                if(objBidders!=null){
                    int rowCount = bidderModel.getRowCount();
                    //Remove rows one by one from the end of the table
                    for (int k = rowCount - 1; k >= 0; k--) {
                        bidderModel.removeRow(k);
                    }
            ListIterator<Bidder> listIterator=(ListIterator)objBidders.iterator();
                while(listIterator.hasNext()){
                    bidder=listIterator.next();
                         bidderModel.addRow(new Object[]{bidder.getName(),bidder.getCode(),Arrays.toString(bidder.getBids())});
            
                    j++;
                }
                }
         }
    }
    
    
    @Override 
 public void actionPerformed(ActionEvent e) { 
   
     Double d;
     for(int i=0;i<names.length;i++){
         d=Bidder.checkCode(names[i]);
           if(d!=null){
                model.setValueAt(d, i,2);
           }
        }
    
     fillbidderTable();
}
    /** 
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        priceTable = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        biddersTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        priceTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "SYMBOL", "NAME", "CURRENT PRICE"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(priceTable);

        jTabbedPane1.addTab("PRICES", jScrollPane2);

        biddersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "NAME", "CODE", "PRICESS"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(biddersTable);
        if (biddersTable.getColumnModel().getColumnCount() > 0) {
            biddersTable.getColumnModel().getColumn(0).setResizable(false);
            biddersTable.getColumnModel().getColumn(1).setResizable(false);
            biddersTable.getColumnModel().getColumn(2).setResizable(false);
        }

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 709, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 455, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("BIDDERS INFO", jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable biddersTable;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable priceTable;
    // End of variables declaration//GEN-END:variables
}
